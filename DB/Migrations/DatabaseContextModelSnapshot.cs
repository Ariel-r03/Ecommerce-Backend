// <auto-generated />
using System;
using DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DB.Brand", b =>
                {
                    b.Property<int>("brandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("brandID"));

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("brandID");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("DB.Categories", b =>
                {
                    b.Property<int>("categoriesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoriesID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("categoriesID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DB.Characteristic", b =>
                {
                    b.Property<int>("characteristicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("characteristicID"));

                    b.Property<string>("detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("characteristicID");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("DB.Order", b =>
                {
                    b.Property<int>("orderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderID"));

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.Property<decimal>("total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("orderID");

                    b.HasIndex("userID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("DB.OrderDetail", b =>
                {
                    b.Property<int>("orderID")
                        .HasColumnType("int");

                    b.Property<int>("productID")
                        .HasColumnType("int");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("orderID", "productID");

                    b.HasIndex("productID");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("DB.Person", b =>
                {
                    b.Property<int>("personID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("personID"));

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("personID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("DB.Product", b =>
                {
                    b.Property<int>("productID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("productID"));

                    b.Property<DateTime?>("LaunchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("brandID")
                        .HasColumnType("int");

                    b.Property<int>("categoriesID")
                        .HasColumnType("int");

                    b.Property<int>("characteristicID")
                        .HasColumnType("int");

                    b.Property<string>("color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("productID");

                    b.HasIndex("brandID");

                    b.HasIndex("categoriesID");

                    b.HasIndex("characteristicID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("DB.User", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userID"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("passwordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("personID")
                        .HasColumnType("int");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userID");

                    b.HasIndex("personID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DB.Order", b =>
                {
                    b.HasOne("DB.User", "User")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB.OrderDetail", b =>
                {
                    b.HasOne("DB.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DB.Product", b =>
                {
                    b.HasOne("DB.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("brandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Categories", "Categories")
                        .WithMany()
                        .HasForeignKey("categoriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Characteristic", "Characteristic")
                        .WithMany()
                        .HasForeignKey("characteristicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Categories");

                    b.Navigation("Characteristic");
                });

            modelBuilder.Entity("DB.User", b =>
                {
                    b.HasOne("DB.Person", "person")
                        .WithMany()
                        .HasForeignKey("personID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("person");
                });
#pragma warning restore 612, 618
        }
    }
}
